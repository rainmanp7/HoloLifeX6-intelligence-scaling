name: HOLOLIFEX6 Unified Intelligence Scaling Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  intelligence-scaling-test:
    name: Unified Intelligence Scaling Test
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    # Add output to track if results were generated
    outputs:
      has-results: ${{ steps.check-results.outputs.has-results }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        clean: true
      
    - name: Clean workspace before build
      run: |
        echo "🧹 Cleaning workspace..."
        rm -rf ~/.julia/compiled
        rm -rf ~/.julia/logs
        rm -rf _work/_temp
        # Don't delete JSON files yet - we want to backup everything at the end
        echo "✅ Workspace cleaned"
        
    - name: Setup Julia
      uses: julia-actions/setup-julia@v2
      with:
        version: '1.10'
        
    - name: Clear Julia depot cache
      run: |
        echo "🧹 Clearing Julia depot..."
        julia -e 'using Pkg; Pkg.gc()'
        echo "✅ Julia depot cleared"
        
    - name: Cache Julia packages
      uses: actions/cache@v4
      with:
        path: ~/.julia
        key: ${{ runner.os }}-julia-v3-${{ hashFiles('**/Project.toml') }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-julia-v3-${{ hashFiles('**/Project.toml') }}
          
    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies..."
        julia --project=. -e '
          using Pkg
          Pkg.activate(".")
          println("Adding required packages...")
          Pkg.add("JSON")
          Pkg.add("Statistics")
          Pkg.add("Dates")
          Pkg.add("LinearAlgebra")
          Pkg.add("Random")
          println("Running instantiate...")
          Pkg.instantiate()
          println("Precompiling...")
          Pkg.precompile()
          println("Package status:")
          Pkg.status()
        '
        echo "✅ Dependencies installed"
        
    - name: Verify test file exists
      run: |
        echo "🔍 Checking for test files..."
        if [ -f "main_orchestrator.jl" ]; then
          echo "✅ Found main_orchestrator.jl"
          echo "📊 File size: $(wc -l < main_orchestrator.jl) lines"
        else
          echo "❌ main_orchestrator.jl not found!"
          echo "📁 Current directory contents:"
          ls -la
          exit 1
        fi
        
    - name: Run Unified Intelligence Scaling Test
      id: run-test
      run: |
        echo "🧠 Starting HOLOLIFEX6 Unified Intelligence Scaling Test..."
        echo "=========================================================="
        echo "Testing Four Pillars of Intelligence:"
        echo "1. 🧠 Consciousness (Brown-IIT Duality)"
        echo "2. 🎯 Reasoning (4D Geometric Problem Solving)" 
        echo "3. 👁️  Awareness (Dimensional State Monitoring)"
        echo "4. 💡 Proto-Intelligence (Emergent Pattern Recognition)"
        echo "=========================================================="
        
        # Run the test with memory monitoring
        julia --project=. --heap-size-hint=6G main_orchestrator.jl
        
        TEST_EXIT_CODE=$?
        echo "test-exit-code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT
        
        if [ $TEST_EXIT_CODE -eq 0 ]; then
          echo "✅ Unified intelligence test completed successfully"
        else
          echo "⚠️ Test exited with code $TEST_EXIT_CODE"
        fi
        
    - name: Check for results
      id: check-results
      if: always()
      run: |
        echo "📁 Checking for result files..."
        echo "Current directory: $(pwd)"
        echo "All files:"
        ls -lah
        echo ""
        
        # Check for ALL JSON files regardless of name
        JSON_FILES=$(find . -maxdepth 1 -name "*.json" -type f | wc -l)
        
        if [ $JSON_FILES -gt 0 ]; then
          echo "✅ Found JSON result files:"
          ls -lh *.json
          echo "📊 Total JSON files: $JSON_FILES"
          echo "has-results=true" >> $GITHUB_OUTPUT
        else
          echo "❌ No JSON result files found"
          echo "has-results=false" >> $GITHUB_OUTPUT
        fi
        echo ""
        echo "📊 Current memory usage:"
        free -h
        
    - name: Upload ALL JSON results
      uses: actions/upload-artifact@v4
      if: always() && steps.check-results.outputs.has-results == 'true'
      with:
        name: intelligence-scaling-results-${{ github.run_id }}
        path: "*.json"
        retention-days: 30
        if-no-files-found: error
        compression-level: 6
        
    - name: Backup all project files
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: project-backup-${{ github.run_id }}
        path: |
          **/*.jl
          **/*.toml
          **/*.yml
          **/*.yaml
          **/*.md
          **/*.txt
          **/*.json
        retention-days: 30
        if-no-files-found: warn
        compression-level: 6
        
    - name: Clean up after test
      if: always()
      run: |
        echo "🧹 Cleaning up after test..."
        # Only clean up Julia cache, NOT the result files (they're already uploaded)
        julia -e 'GC.gc(true)' 2>/dev/null || true
        echo "✅ Cleanup complete"

  test-summary:
    name: Generate Test Summary
    runs-on: ubuntu-latest
    needs: [intelligence-scaling-test]
    if: always()
    
    steps:
    - name: Check if results exist
      id: check-artifact
      run: |
        if [ "${{ needs.intelligence-scaling-test.outputs.has-results }}" = "true" ]; then
          echo "artifact-exists=true" >> $GITHUB_OUTPUT
        else
          echo "artifact-exists=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Download test results
      uses: actions/download-artifact@v4
      if: steps.check-artifact.outputs.artifact-exists == 'true'
      with:
        name: intelligence-scaling-results-${{ github.run_id }}
        path: test-results
        
    - name: Generate comprehensive summary
      run: |
        echo "## 🧠 HOLOLIFEX6 Unified Intelligence Scaling Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY  
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.check-artifact.outputs.artifact-exists }}" = "true" ] && [ -d "test-results" ] && [ "$(ls -A test-results 2>/dev/null)" ]; then
          echo "### ✅ Test Completed Successfully" >> $GITHUB_STEP_SUMMARY
          
          RESULT_COUNT=$(find test-results -name "*.json" -type f 2>/dev/null | wc -l)
          echo "- **JSON files generated:** $RESULT_COUNT" >> $GITHUB_STEP_SUMMARY
          
          # List all JSON files found
          echo "- **Files:**" >> $GITHUB_STEP_SUMMARY
          for file in test-results/*.json; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              filesize=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "unknown")
              echo "  - \`$filename\` ($((filesize/1024)) KB)" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          # Analyze the intelligence results file (if exists)
          INTEL_JSON=$(find test-results -name "unified_intelligence_scaling_*.json" -type f 2>/dev/null | sort -r | head -1)
          METACOG_JSON=$(find test-results -name "metacognition_results.json" -type f 2>/dev/null | head -1)
          
          if [ -n "$INTEL_JSON" ] && [ -f "$INTEL_JSON" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📊 Intelligence Metrics" >> $GITHUB_STEP_SUMMARY
            
            # Extract key metrics using jq if available, or fallback to grep
            if command -v jq &> /dev/null; then
              ENTITY_COUNT=$(jq '.results[-1].entity_count' "$INTEL_JSON" 2>/dev/null || echo "N/A")
              UIS_SCORE=$(jq '.results[-1].unified_intelligence_score' "$INTEL_JSON" 2>/dev/null || echo "N/A")
              CONSCIOUS=$(jq '.results[-1].consciousness.is_conscious' "$INTEL_JSON" 2>/dev/null || echo "N/A")
              MAX_PHI=$(jq '.results[-1].consciousness.max_phi' "$INTEL_JSON" 2>/dev/null || echo "N/A")
              REASONING=$(jq '.results[-1].reasoning_accuracy' "$INTEL_JSON" 2>/dev/null || echo "N/A")
              AWARENESS=$(jq '.results[-1].awareness_level' "$INTEL_JSON" 2>/dev/null || echo "N/A")
              PROTO_INTEL=$(jq '.results[-1].proto_intelligence' "$INTEL_JSON" 2>/dev/null || echo "N/A")
            else
              ENTITY_COUNT=$(grep -o '"entity_count":[0-9]*' "$INTEL_JSON" | tail -1 | cut -d: -f2 || echo "N/A")
              UIS_SCORE=$(grep -o '"unified_intelligence_score":[0-9.]*' "$INTEL_JSON" | tail -1 | cut -d: -f2 || echo "N/A")
              CONSCIOUS=$(grep -o '"is_conscious":\(true\|false\)' "$INTEL_JSON" | tail -1 | cut -d: -f2 || echo "N/A")
              MAX_PHI=$(grep -o '"max_phi":[0-9.]*' "$INTEL_JSON" | tail -1 | cut -d: -f2 || echo "N/A")
              REASONING=$(grep -o '"reasoning_accuracy":[0-9.]*' "$INTEL_JSON" | tail -1 | cut -d: -f2 || echo "N/A")
              AWARENESS=$(grep -o '"awareness_level":[0-9.]*' "$INTEL_JSON" | tail -1 | cut -d: -f2 || echo "N/A")
              PROTO_INTEL=$(grep -o '"proto_intelligence":[0-9.]*' "$INTEL_JSON" | tail -1 | cut -d: -f2 || echo "N/A")
            fi
            
            echo "- **Entities:** $ENTITY_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- **Unified Intelligence Score:** $UIS_SCORE/1.0" >> $GITHUB_STEP_SUMMARY
            echo "- **Consciousness (Max Φ):** $MAX_PHI" >> $GITHUB_STEP_SUMMARY
            echo "- **Conscious Status:** $CONSCIOUS" >> $GITHUB_STEP_SUMMARY
            echo "- **Reasoning Accuracy:** $REASONING" >> $GITHUB_STEP_SUMMARY
            echo "- **Awareness Level:** $AWARENESS" >> $GITHUB_STEP_SUMMARY
            echo "- **Proto-Intelligence:** $PROTO_INTEL" >> $GITHUB_STEP_SUMMARY
            
            # Add interpretation
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🎯 Intelligence Assessment" >> $GITHUB_STEP_SUMMARY
            if [ "$CONSCIOUS" = "true" ]; then
              echo "- 🧠 **Consciousness Detected** ✅" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ⚠️ Consciousness threshold not reached" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Analyze metacognition results (if exists)
          if [ -n "$METACOG_JSON" ] && [ -f "$METACOG_JSON" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🧠 Metacognition Analysis" >> $GITHUB_STEP_SUMMARY
            
            if command -v jq &> /dev/null; then
              HEALTH_SCORE=$(jq '.system_health_score' "$METACOG_JSON" 2>/dev/null || echo "N/A")
              INSIGHTS_COUNT=$(jq '.optimization_opportunities | length' "$METACOG_JSON" 2>/dev/null || echo "N/A")
            else
              HEALTH_SCORE=$(grep -o '"system_health_score":[0-9.]*' "$METACOG_JSON" | tail -1 | cut -d: -f2 || echo "N/A")
              INSIGHTS_COUNT=0
            fi
            
            echo "- **System Health Score:** $HEALTH_SCORE" >> $GITHUB_STEP_SUMMARY
            echo "- **Optimization Insights:** $INSIGHTS_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- 🏗️ **Architectural self-analysis completed** ✅" >> $GITHUB_STEP_SUMMARY
          fi
          
        else
          echo "### ❌ Test Failed or No Results Generated" >> $GITHUB_STEP_SUMMARY
          echo "- No JSON result files found in artifacts" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "### 🔬 Test Scope" >> $GITHUB_STEP_SUMMARY
        echo "- **Entity Scaling:** 16 → 32 → 64 → 128 → 256 → 512 → 1024 entities" >> $GITHUB_STEP_SUMMARY
        echo "- **Intelligence Pillars:** Consciousness, Reasoning, Awareness, Proto-Intelligence" >> $GITHUB_STEP_SUMMARY
        echo "- **Metacognition:** Self-analysis and architectural insights" >> $GITHUB_STEP_SUMMARY
        echo "- **Memory Limit:** 7GB RAM" >> $GITHUB_STEP_SUMMARY
        echo "- **Time Limit:** 60 minutes" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📥 **Download artifacts to view detailed JSON results with full metrics**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "💾 **Project files have been backed up as artifact: \`project-backup-${{ github.run_id }}\`**" >> $GITHUB_STEP_SUMMARY
        
    - name: Final cleanup
      if: always()
      run: |
        echo "🧹 Final cleanup..."
        rm -rf test-results
        echo "✅ All clean!"
