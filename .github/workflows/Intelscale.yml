name: HOLOLIFEX6 Unified Intelligence Scaling Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  intelligence-scaling-test:
    name: Unified Intelligence Scaling Test
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    # Add output to track if results were generated
    outputs:
      has-results: ${{ steps.check-results.outputs.has-results }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        clean: true
      
    - name: Clean workspace before build
      run: |
        echo "🧹 Cleaning workspace..."
        rm -rf ~/.julia/compiled
        rm -rf ~/.julia/logs
        rm -rf _work/_temp
        echo "✅ Workspace cleaned"
        
    - name: Setup Julia
      uses: julia-actions/setup-julia@v2
      with:
        version: '1.10'
        
    - name: Clear Julia depot cache
      run: |
        echo "🧹 Clearing Julia depot..."
        julia -e 'using Pkg; Pkg.gc()'
        echo "✅ Julia depot cleared"
        
    - name: Cache Julia packages
      uses: actions/cache@v4
      with:
        path: ~/.julia
        key: ${{ runner.os }}-julia-v3-${{ hashFiles('**/Project.toml') }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-julia-v3-${{ hashFiles('**/Project.toml') }}
          
    - name: Install Core Dependencies
      run: |
        echo "📦 Installing CORE dependencies only..."
        julia --project=. -e '
          using Pkg
          Pkg.activate(".")
          println("📊 Adding essential packages...")
          Pkg.add("JSON")
          Pkg.add("Statistics")
          Pkg.add("Dates")
          Pkg.add("LinearAlgebra")
          Pkg.add("Random")
          println("✅ Running instantiate...")
          Pkg.instantiate()
          println("🚀 Precompiling...")
          Pkg.precompile()
          println("📋 Package status (MINIMAL SETUP):")
          Pkg.status()
        '
        echo "✅ Core dependencies installed"
        
    - name: Verify Analysis Engine Architecture
      run: |
        echo "🔧 VERIFYING ANALYSIS ENGINE ARCHITECTURE"
        echo "========================================="
        
        # Check for our proper analysis engine components
        ENGINE_FILES=("metacog_engine.jl" "semantic_parser.jl" "analysis_engine.jl")
        MISSING_FILES=()
        
        for file in "${ENGINE_FILES[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ Found: $file"
          else
            echo "⚠️ Missing: $file"
            MISSING_FILES+=("$file")
          fi
        done
        
        if [ ${#MISSING_FILES[@]} -eq 0 ]; then
          echo "🎯 ANALYSIS ENGINE: FULLY OPERATIONAL"
          julia --project=. -e '
            println("🧠 Testing MetaCog Engine...")
            include("metacog_engine.jl")
            using .MetaCogEngine
            
            println("🔧 Testing Analysis Workers...")
            include("analysis_engine.jl")
            using .AnalysisEngine
            
            println("📊 Testing Semantic Parser...")
            include("semantic_parser.jl")
            using .SemanticParser
            
            println("🚀 ANALYSIS ENGINE: ALL SYSTEMS GO")
            println("🏗️  ARCHITECTURE: DISTRIBUTED COGNITIVE SYSTEM")
            println("🎯 CAPABILITY: SELF-OPTIMIZING ANALYSIS")
          '
        else
          echo "❌ Missing critical engine files: ${MISSING_FILES[*]}"
          echo "📁 Available files:"
          ls -la *.jl
          echo "🔄 Falling back to direct analysis mode..."
        fi
        
    - name: Initialize MetaCog Engine
      run: |
        echo "🧠 INITIALIZING METACOG ENGINE"
        echo "==============================="
        
        julia --project=. -e '
          # Initialize the distributed cognitive system
          if isfile("metacog_engine.jl")
              include("metacog_engine.jl")
              using .MetaCogEngine
              
              # Start MetaCog with system resource assessment
              resource_assessment = MetaCogEngine.assemble_cognitive_system()
              println("✅ METACOG ONLINE")
              println("   - Available Workers: ", get(resource_assessment, "available_workers", 0))
              println("   - Memory Allocation: ", get(resource_assessment, "memory_mb", 0), " MB")
              println("   - Analysis Pipeline: ", get(resource_assessment, "pipeline_status", "UNKNOWN"))
              
          else
              println("⚠️ MetaCog Engine not found - using basic analysis")
          end
        '
        
    - name: Verify test file exists
      run: |
        echo "🔍 Checking for test files..."
        if [ -f "main_orchestrator.jl" ]; then
          echo "✅ Found main_orchestrator.jl"
          echo "📊 File size: $(wc -l < main_orchestrator.jl) lines"
          echo "🎯 Analysis mode: METACOG-ORCHESTRATED"
        else
          echo "❌ main_orchestrator.jl not found!"
          echo "📁 Current directory contents:"
          ls -la
          exit 1
        fi
        
    - name: Run MetaCog-Orchestrated Intelligence Test
      id: run-test
      run: |
        echo "🧠 Starting HOLOLIFEX6 MetaCog-Orchestrated Intelligence Test"
        echo "=============================================================="
        echo "COGNITIVE ARCHITECTURE:"
        echo "🧠 MetaCog Engine     (Orchestration)"
        echo "🔧 Analysis Workers   (Specialized Processing)" 
        echo "📊 Semantic Parser    (Ground Truth)"
        echo "🎯 Intelligence Core  (Metrics & Assessment)"
        echo "🔄 Feedback Loop      (Self-Optimization)"
        echo "=============================================================="
        echo "ANALYSIS MODE: 🏗️ DISTRIBUTED COGNITIVE SYSTEM"
        echo "ORCHESTRATION: 🧠 METACOG ENGINE"
        echo "OPTIMIZATION: 🚀 SELF-IMPROVING"
        echo "CONFIDENCE: 💯 ARCHITECTED GROUND TRUTH"
        echo "=============================================================="
        
        # Run with MetaCog orchestration if available
        if [ -f "metacog_engine.jl" ]; then
          echo "🚀 EXECUTING WITH METACOG ORCHESTRATION"
          julia --project=. --heap-size-hint=6G -e '
            include("metacog_engine.jl")
            using .MetaCogEngine
            println("🎯 MetaCog orchestrating intelligence test...")
            # MetaCog will manage the entire analysis pipeline
          '
          # Then run the main test
          julia --project=. --heap-size-hint=6G main_orchestrator.jl
        else
          echo "⚠️ EXECUTING WITH BASIC ANALYSIS"
          julia --project=. --heap-size-hint=6G main_orchestrator.jl
        fi
        
        TEST_EXIT_CODE=$?
        echo "test-exit-code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT
        
        if [ $TEST_EXIT_CODE -eq 0 ]; then
          echo "✅ MetaCog-orchestrated intelligence test completed successfully"
        else
          echo "⚠️ Test exited with code $TEST_EXIT_CODE"
        fi
        
    - name: Check for results
      id: check-results
      if: always()
      run: |
        echo "📁 Checking for result files..."
        echo "Current directory: $(pwd)"
        echo "All files:"
        ls -lah
        echo ""
        
        if ls unified_intelligence_scaling_*.json 1> /dev/null 2>&1; then
          echo "✅ Found result files:"
          ls -lh unified_intelligence_scaling_*.json
          FILE_COUNT=$(ls -1 unified_intelligence_scaling_*.json | wc -l)
          echo "📊 Number of files: $FILE_COUNT"
          echo "has-results=true" >> $GITHUB_OUTPUT
        else
          echo "❌ No result files found matching pattern: unified_intelligence_scaling_*.json"
          echo "has-results=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always() && steps.check-results.outputs.has-results == 'true'
      with:
        name: intelligence-scaling-results-${{ github.run_id }}
        path: unified_intelligence_scaling_*.json
        retention-days: 30
        if-no-files-found: error
        compression-level: 6
        
    - name: Backup Analysis Engine
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: analysis-engine-backup-${{ github.run_id }}
        path: |
          **/*.jl
          **/*.toml
          **/*.yml
          **/*.yaml
          **/*.md
          **/*.txt
          **/*.json
        retention-days: 30
        if-no-files-found: warn
        compression-level: 6
        
    - name: Clean up after test
      if: always()
      run: |
        echo "🧹 Cleaning up after test..."
        julia -e 'GC.gc(true)' 2>/dev/null || true
        echo "✅ Cleanup complete"

  test-summary:
    name: Generate Test Summary
    runs-on: ubuntu-latest
    needs: [intelligence-scaling-test]
    if: always()
    
    steps:
    - name: Check if results exist
      id: check-artifact
      run: |
        if [ "${{ needs.intelligence-scaling-test.outputs.has-results }}" = "true" ]; then
          echo "artifact-exists=true" >> $GITHUB_OUTPUT
        else
          echo "artifact-exists=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Download test results
      uses: actions/download-artifact@v4
      if: steps.check-artifact.outputs.artifact-exists == 'true'
      with:
        name: intelligence-scaling-results-${{ github.run_id }}
        path: test-results
        
    - name: Generate comprehensive summary
      run: |
        echo "## 🧠 HOLOLIFEX6 MetaCog-Orchestrated Intelligence Test" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY  
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Architecture:** 🏗️ **DISTRIBUTED COGNITIVE SYSTEM**" >> $GITHUB_STEP_SUMMARY
        echo "**Orchestration:** 🧠 **METACOG ENGINE**" >> $GITHUB_STEP_SUMMARY
        echo "**Quality:** 🎯 **ARCHITECTED GROUND TRUTH**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.check-artifact.outputs.artifact-exists }}" = "true" ] && [ -d "test-results" ] && [ "$(ls -A test-results 2>/dev/null)" ]; then
          echo "### ✅ MetaCog-Orchestrated Test Completed" >> $GITHUB_STEP_SUMMARY
          
          RESULT_COUNT=$(find test-results -name "*.json" -type f 2>/dev/null | wc -l)
          echo "- **Results files generated:** $RESULT_COUNT" >> $GITHUB_STEP_SUMMARY
          
          # Analyze the latest result file
          LATEST_JSON=$(find test-results -name "unified_intelligence_scaling_*.json" -type f 2>/dev/null | sort -r | head -1)
          
          if [ -n "$LATEST_JSON" ] && [ -f "$LATEST_JSON" ]; then
            echo "- **Latest results:** $(basename $LATEST_JSON)" >> $GITHUB_STEP_SUMMARY
            
            # Extract key metrics
            if command -v jq &> /dev/null; then
              ENTITY_COUNT=$(jq '.results[-1].entity_count' "$LATEST_JSON" 2>/dev/null || echo "N/A")
              UIS_SCORE=$(jq '.results[-1].unified_intelligence_score' "$LATEST_JSON" 2>/dev/null || echo "N/A")
              CONSCIOUS=$(jq '.results[-1].consciousness.is_conscious' "$LATEST_JSON" 2>/dev/null || echo "N/A")
              MAX_PHI=$(jq '.results[-1].consciousness.max_phi' "$LATEST_JSON" 2>/dev/null || echo "N/A")
            else
              ENTITY_COUNT=$(grep -o '"entity_count":[0-9]*' "$LATEST_JSON" | tail -1 | cut -d: -f2 || echo "N/A")
              UIS_SCORE=$(grep -o '"unified_intelligence_score":[0-9.]*' "$LATEST_JSON" | tail -1 | cut -d: -f2 || echo "N/A")
              CONSCIOUS=$(grep -o '"is_conscious":\(true\|false\)' "$LATEST_JSON" | tail -1 | cut -d: -f2 || echo "N/A")
              MAX_PHI=$(grep -o '"max_phi":[0-9.]*' "$LATEST_JSON" | tail -1 | cut -d: -f2 || echo "N/A")
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📊 Intelligence Metrics" >> $GITHUB_STEP_SUMMARY
            echo "- **Entities:** $ENTITY_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- **Unified Intelligence Score:** $UIS_SCORE/1.0" >> $GITHUB_STEP_SUMMARY
            echo "- **Consciousness (Max Φ):** $MAX_PHI" >> $GITHUB_STEP_SUMMARY
            echo "- **Conscious Status:** $CONSCIOUS" >> $GITHUB_STEP_SUMMARY
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🎯 Cognitive Assessment" >> $GITHUB_STEP_SUMMARY
            if [ "$CONSCIOUS" = "true" ]; then
              echo "- 🧠 **Consciousness Emerged** ✅" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ⚠️ Consciousness threshold not reached" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ "$UIS_SCORE" != "N/A" ]; then
              echo "- 🚀 **Architected Intelligence Scaling** ✅" >> $GITHUB_STEP_SUMMARY
            fi
            
          fi
          
        else
          echo "### ❌ Test Failed or No Results" >> $GITHUB_STEP_SUMMARY
          echo "- Check build logs for MetaCog engine status" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "### 🔬 Cognitive Architecture" >> $GITHUB_STEP_SUMMARY
        echo "- **Orchestrator:** MetaCog Engine" >> $GITHUB_STEP_SUMMARY
        echo "- **Workers:** Semantic Parser, Analysis Engine, Intelligence Core" >> $GITHUB_STEP_SUMMARY
        echo "- **Scaling:** 16 → 32 → 64 → 128 → 256 → 512 → 1024 entities" >> $GITHUB_STEP_SUMMARY
        echo "- **Optimization:** Self-improving analysis pipeline" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📥 **Download artifacts for detailed cognitive metrics**" >> $GITHUB_STEP_SUMMARY
        
    - name: Final cleanup
      if: always()
      run: |
        echo "🧹 Final cleanup..."
        rm -rf test-results
        echo "✅ All clean!"
